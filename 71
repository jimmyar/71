#!/usr/bin/env python3
import os, time, threading, subprocess, multiprocessing
from multiprocessing import Value, Lock
from ctypes import c_longlong
from hashlib import sha256
from Crypto.Hash import RIPEMD160
import base58
from operator import itemgetter

# â”€â”€ CONFIG â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
matches_file   = 'compromised_keys2.txt'
special_wallet = "1PWo3JeB9jrGwfHDNpdGK54CRas7fsVzXU"

WEIGHTS      = [1.0/(i+1) for i in range(len(special_wallet))]
TOTAL_WEIGHT = sum(WEIGHTS)
_dec         = base58.b58decode_check(special_wallet)
special_h160 = _dec[1:]
SPECIAL_H0   = special_h160[0]

key_counter  = Value(c_longlong, 0)
counter_lock = Lock()
threads      = []

# â”€â”€ Generate & compile the C helper â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
c_code = f'''
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdlib.h>
#include <secp256k1.h>
#include <openssl/sha.h>
#include <openssl/ripemd.h>

#define SUFFIX_BYTES 9
#define PREFIX_BYTES 23
#define RESET_LIMIT 65536

static const char *BASE58_ALPHABET =
  "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
static const uint8_t TARGET_PREFIX = 0x{SPECIAL_H0:02x};

void base58check(uint8_t *h160, char *out) {{
    uint8_t buf[25]; buf[0]=0x00; memcpy(buf+1,h160,20);
    uint8_t hash[32]; SHA256(buf,21,hash); SHA256(hash,32,hash);
    memcpy(buf+21,hash,4);
    uint8_t b58[40] = {{0}};
    for(int i=0;i<25;i++) {{
        int carry=buf[i];
        for(int j=0;j<40;j++) {{
            carry += b58[j]<<8; b58[j]=carry%58; carry/=58;
        }}
    }}
    int i=39,outlen=0;
    while(i>=0 && b58[i]==0) i--;
    for(int j=0;j<25 && buf[j]==0; j++) out[outlen++]='1';
    for(; i>=0; i--) out[outlen++] = BASE58_ALPHABET[b58[i]];
    out[outlen]='\\0';
}}

void hexify(uint8_t *src, char *dst) {{
    for(int i=0;i<32;i++) sprintf(dst+i*2,"%02x",src[i]);
    dst[64]='\\0';
}}

int main() {{
    int urand = open("/dev/urandom",O_RDONLY);
    if(urand<0) return 1;
    secp256k1_context *ctx =
        secp256k1_context_create(SECP256K1_CONTEXT_SIGN|SECP256K1_CONTEXT_VERIFY);
    uint8_t base_priv[32]={{0}}, tweak[32]={{0}}, h1[32], h160[20];
    char priv_hex[65], address[60];
    uint64_t counter=0, total=0;
    uint8_t suffix[SUFFIX_BYTES];

    do read(urand,suffix,SUFFIX_BYTES);
    while((suffix[0]>>4)<4 || (suffix[0]>>4)>7);
    memcpy(base_priv+PREFIX_BYTES,suffix,SUFFIX_BYTES);

    if(!secp256k1_ec_seckey_verify(ctx, base_priv)) return 1;
    secp256k1_pubkey pub;
    secp256k1_ec_pubkey_create(ctx, &pub, base_priv);

    while(1) {{
        if(read(urand, tweak+24,8)!=8) continue;
        secp256k1_pubkey tp = pub; uint8_t priv_out[32];
        memcpy(priv_out,base_priv,32);
        secp256k1_ec_pubkey_tweak_add(ctx,&tp,tweak);
        secp256k1_ec_privkey_tweak_add(ctx,priv_out,tweak);

        uint8_t ser[33]; size_t len=33;
        secp256k1_ec_pubkey_serialize(ctx,ser,&len,&tp,SECP256K1_EC_COMPRESSED);
        SHA256(ser,len,h1); RIPEMD160(h1,32,h160);

        if(h160[0]==TARGET_PREFIX) {{
            base58check(h160,address); hexify(priv_out,priv_hex);
            printf("%s %s\\n",priv_hex,address); fflush(stdout);
        }}

        counter++;
        if(counter>=RESET_LIMIT) {{
            total+=RESET_LIMIT;
            printf("@@COUNT@@ %llu\\n",(unsigned long long)total); fflush(stdout);
            counter=0;
            do read(urand,suffix,SUFFIX_BYTES);
            while((suffix[0]>>4)<4||(suffix[0]>>4)>7);
            memcpy(base_priv+PREFIX_BYTES,suffix,SUFFIX_BYTES);
            if(!secp256k1_ec_seckey_verify(ctx,base_priv)) continue;
            secp256k1_ec_pubkey_create(ctx,&pub,base_priv);
        }}
    }}
    return 0;
}}
'''
with open('wallet_search.c','w') as f: f.write(c_code)
subprocess.run(['gcc','-O3','-o','wallet_search','wallet_search.c','-lsecp256k1','-lcrypto'], check=True)

# â”€â”€ Step 4: Launch & monitor â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
def python_score(addr):
    return (sum(WEIGHTS[i] for i in range(len(addr)) if addr[i]==special_wallet[i]) /
            TOTAL_WEIGHT) ** 1.5

def update_top(local, cand):
    if any(cand[2]==x[2] for x in local): return
    if len(local)<3: local.append(cand)
    else:
        w=min(local, key=itemgetter(0))
        if cand[0]>w[0]:
            local.remove(w); local.append(cand)

def c_reader(proc, local_top):
    last=0
    for line in proc.stdout:
        if "@@COUNT@@" in line:
            printed=int(line.split()[-1])
            delta=printed-last
            if delta>0: 
                with counter_lock: key_counter.value+=delta
            last=printed
        else:
            try:
                pk,addr=line.split()
                sc=python_score(addr)
                if addr==special_wallet:
                    wif=base58.b58encode_check(b'\x80'+bytes.fromhex(pk)+b'\x01').decode()
                    with open(matches_file,'a') as f:
                        f.write(f"ðŸŽ¯ FOUND: {addr} WIF={wif}\n")
                update_top(local_top,(sc,addr,pk))
            except: pass

for _ in range(multiprocessing.cpu_count()):
    p=subprocess.Popen(['./wallet_search'], stdout=subprocess.PIPE, text=True, bufsize=1)
    t=[]; threading.Thread(target=c_reader,args=(p,t),daemon=True).start()
    threads.append((p,t))

def monitor():
    prev, pt = 0, time.time()
    while True:
        time.sleep(5)
        now=key_counter.value; t0=time.time()
        rate=(now-prev)/(t0-pt) if t0>pt else 0
        print(f"ðŸ”¹ {now:,} keys @ {rate:,.2f}/s")
        best=[]; seen=set()
        for _,t in threads:
            for sc,addr,pk in t:
                if pk not in seen:
                    best.append((sc,addr,pk)); seen.add(pk)
        best.sort(reverse=True)
        print("ðŸ”¥ Top 3:")
        for sc,addr,pk in best[:3]:
            print(f"   {addr} (score={sc:.4f}) PRIV={pk}")
        prev, pt = now, t0

threading.Thread(target=monitor,daemon=True).start()
while True: time.sleep(1)
